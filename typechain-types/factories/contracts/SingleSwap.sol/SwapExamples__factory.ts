/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  SwapExamples,
  SwapExamplesInterface,
} from "../../../contracts/SingleSwap.sol/SwapExamples";

const _abi = [
  {
    inputs: [],
    name: "poolFee",
    outputs: [
      {
        internalType: "uint24",
        name: "",
        type: "uint24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenOut",
        type: "address",
      },
    ],
    name: "swapExactInputSingle",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "swapRouter",
    outputs: [
      {
        internalType: "contract ISwapRouter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610968806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063089fe6aa146100465780634ce4dca514610064578063c31c9c0714610094575b600080fd5b61004e6100b2565b60405161005b919061085f565b60405180910390f35b61007e600480360381019061007991906106ce565b6100b8565b60405161008b919061087a565b60405180910390f35b61009c61022d565b6040516100a99190610828565b60405180910390f35b610bb881565b60006100c683333087610245565b6100e58373e592427a0aece92de3edee1f18e0157c0586156486610465565b60006040518061010001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff168152602001610bb862ffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815260200142815260200186815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815250905073e592427a0aece92de3edee1f18e0157c0586156473ffffffffffffffffffffffffffffffffffffffff1663414bf389826040518263ffffffff1660e01b81526004016101d19190610843565b602060405180830381600087803b1580156101eb57600080fd5b505af11580156101ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022391906106a5565b9150509392505050565b73e592427a0aece92de3edee1f18e0157c0586156481565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b868686604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b602083106103445780518252602082019150602081019050602083039250610321565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146103a6576040519150601f19603f3d011682016040523d82523d6000602084013e6103ab565b606091505b50915091508180156103eb57506000815114806103ea57508080602001905160208110156103d857600080fd5b81019080805190602001909291905050505b5b61045d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260038152602001807f535446000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b8585604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b602083106105465780518252602082019150602081019050602083039250610523565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146105a8576040519150601f19603f3d011682016040523d82523d6000602084013e6105ad565b606091505b50915091508180156105ed57506000815114806105ec57508080602001905160208110156105da57600080fd5b81019080805190602001909291905050505b5b61065f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260028152602001807f534100000000000000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b5050505050565b60008135905061067581610904565b92915050565b60008135905061068a8161091b565b92915050565b60008151905061069f8161091b565b92915050565b6000602082840312156106b757600080fd5b60006106c584828501610690565b91505092915050565b6000806000606084860312156106e357600080fd5b60006106f18682870161067b565b935050602061070286828701610666565b925050604061071386828701610666565b9150509250925092565b61072681610895565b82525050565b610735816108e0565b82525050565b61010082016000820151610752600085018261071d565b506020820151610765602085018261071d565b50604082015161077860408501826107ec565b50606082015161078b606085018261071d565b50608082015161079e608085018261080a565b5060a08201516107b160a085018261080a565b5060c08201516107c460c085018261080a565b5060e08201516107d760e08501826107dd565b50505050565b6107e6816108a7565b82525050565b6107f5816108c7565b82525050565b610804816108c7565b82525050565b610813816108d6565b82525050565b610822816108d6565b82525050565b600060208201905061083d600083018461072c565b92915050565b600061010082019050610859600083018461073b565b92915050565b600060208201905061087460008301846107fb565b92915050565b600060208201905061088f6000830184610819565b92915050565b60006108a0826108a7565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b60006108eb826108f2565b9050919050565b60006108fd826108a7565b9050919050565b61090d81610895565b811461091857600080fd5b50565b610924816108d6565b811461092f57600080fd5b5056fea2646970667358221220c719de2eec6827d60500f79ba1fc7ffd29f536e2607826d7e0c96ea3ad831d4564736f6c63430007060033";

type SwapExamplesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapExamplesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapExamples__factory extends ContractFactory {
  constructor(...args: SwapExamplesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SwapExamples & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SwapExamples__factory {
    return super.connect(runner) as SwapExamples__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapExamplesInterface {
    return new Interface(_abi) as SwapExamplesInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SwapExamples {
    return new Contract(address, _abi, runner) as unknown as SwapExamples;
  }
}
